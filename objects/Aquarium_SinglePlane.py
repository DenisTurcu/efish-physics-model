import sys
import numpy as np

sys.path.append("helper_functions/")
sys.path.append("../helper_functions/")

from Fish import Fish  # noqa E402
from Aquarium import Aquarium  # noqa E402


class SinglePlaneAquarium(Aquarium):
    """Represents an aquarium which has a single planar boundary, representing the bottom of the tank.
    Parent class "Aquarium":"""

    __doc__ += Aquarium.__doc__  # type: ignore

    def __init__(self, _init_tests=True, **kwds):
        """SinglePlaneAquarium initialization. Parent __doc__:\n"""
        SinglePlaneAquarium.__init__.__doc__ += super().__init__.__doc__  # type: ignore

        super().__init__(**kwds, _init_tests=False)
        # Run assertion tests
        if _init_tests:
            assert (
                len(self.boundaries) == 1
            ), "This aquarium must have a single boundary, representing the bottom of the tank."
            assert self.boundaries[0].get_type().lower() == "plane", "The boundary for this aquarium should be a plane."
            print(self.run_tests())

    def update_image_currents(self, obj: Fish, mode: str = "insert"):
        """Update the image currents generated by the single planar boundary.
        Parent __doc__:\n
        """
        SinglePlaneAquarium.update_image_currents.__doc__ += super().update_image_currents.__doc__  # type: ignore

        super().update_image_currents(obj, mode)
        if mode.lower() == "insert":
            # compute 'image point currents magnitude/location' using boundary
            image_pc_mag, image_pc_loc = self.compute_image_point_currents(obj)
            self.image_point_currents_magnitude[-1] = (
                self.image_point_currents_magnitude[-1][0],  # type: ignore
                image_pc_mag,
            )
            self.image_point_currents_location[-1] = (
                self.image_point_currents_location[-1][0],  # type: ignore
                image_pc_loc,
            )
        pass

    def compute_image_point_currents(self, fish: Fish) -> tuple[np.ndarray, np.ndarray]:
        """_summary_

        Args:
            fish (Fish): Fish for which image point currents are computed.

        Returns:
            tuple[np.ndarray, np.ndarray]: Magnitude and location of the image point currents.
        """
        assert isinstance(fish, Fish), "Need a fish object to compute the image point currents."
        image_mag = fish.get_point_currents_magnitude()  # same as the fish point currents
        image_loc = fish.get_point_currents_location()  # modified bellow, reflected w.r.t. the boundary
        assert (
            image_mag.shape[0] == image_loc.shape[0]
        ), "Magnitudes and locations of point currents numbers should match."
        assert image_loc.shape[1] == 3, "Locations of point currents should be shape (N,3)."
        # reflect point currents with respect to planar boundary
        image_loc = (
            image_loc
            - 2
            * ((image_loc - self.boundaries[0].get_reference_point()) @ self.boundaries[0].get_normal()).reshape(-1, 1)
            * self.boundaries[0].get_normal()
        )
        return image_mag, image_loc

    def details(self):
        """Provides the details of the SinglePlaneAquarium. Parent __doc__:\n"""
        SinglePlaneAquarium.details.__doc__ += super().details.__doc__  # type: ignore

        details_string = super().details()
        details_string += "This aquarium type has a single planar boundary.\n"
        return details_string
