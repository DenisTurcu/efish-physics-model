import numpy as np
import plotly.graph_objects as go
from scipy.spatial.transform import Rotation as R


import sys
sys.path.append('/Users/denis/OneDrive - cumc.columbia.edu/projects/electric_fish/model/electrodynamic/helper_functions/')

from ElectricObject import ElectricObject
from Fish import Fish
from Worm import Worm
from Aquarium import Aquarium
from Boundaries import Plane


class SinglePlaneAquarium(Aquarium):
    ''' Represents an aquarium which has a single planar boundary, representing the bottom of the tank. Parent class "Aquarium": '''
    __doc__ += Aquarium.__doc__

    def __init__(self, _init_tests=True, **kwds):
        super().__init__(**kwds,_init_tests=False)
        # Run assertion tests
        if _init_tests:
            assert len(self.boundaries) == 1, 'This aquarium must have a single boundary, representing the bottom of the tank.'
            assert self.boundaries[0].get_type().lower() == 'plane', 'The boundary for this aquarium should be a plane.'
            print(self.run_tests())


    def update_image_currents(self, obj, mode='insert'):
        ''' Update the image currents generated by the single planar boundary. '''
        super().update_image_currents(obj, mode)
        if mode.lower() == 'insert':
            # compute 'image point currents magnitude/location' using boundary
            image_pc_mag, image_pc_loc = self.compute_image_point_currents(obj)
            self.image_point_currents_magnitude[-1] = (self.image_point_currents_magnitude[-1][0], image_pc_mag)
            self.image_point_currents_location[ -1] = (self.image_point_currents_location[ -1][0], image_pc_loc)
        return


    def compute_image_point_currents(self, fish):
        assert isinstance(fish, Fish), 'Need a fish object to compute the image point currents.'
        image_mag = fish.get_point_currents_magnitude()  # same as the fish point currents
        image_loc = fish.get_point_currents_location()   # modified bellow, reflected w.r.t. the boundary
        assert image_mag.shape[0] == image_loc.shape[0], 'Magnitudes and locations of point currents numbers should match.'
        assert image_loc.shape[1] == 3, 'Locations of point currents should be shape (N,3).'
        # reflect point currents with respect to planar boundary
        image_loc = image_loc - 2 * ((image_loc - self.boundaries[0].get_reference_point()) @ self.boundaries[0].get_normal()).reshape(-1,1) * self.boundaries[0].get_normal()
        return image_mag, image_loc


    def details(self):
        ''' Provides the details of the object. Can be adjusted in child classes to include more information. '''
        details_string  =  super().details()
        details_string += 'This aquarium type has a single planar boundary.'
        return details_string


    def run_tests(self):
        ''' Sanity assertion checks to ensure code robustness. '''
        super().run_tests()
        return 'Success!'













